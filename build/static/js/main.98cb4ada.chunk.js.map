{"version":3,"sources":["Component/navbar.js","Component/card.js","Component/menuCard.js","Component/addNumber.js","App.js","serviceWorker.js","index.js"],"names":["MainNavber","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","NavDropdown","title","Item","Divider","Form","inline","FormControl","type","placeholder","Button","variant","React","Component","MyCard","class","Card","Img","src","Body","Title","this","props","Text","listItems","map","number","MenuCard","AddNumber","state","counter","handleClick","bind","setState","prevState","Fragment","message","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qVA6BeA,E,iLAxBX,OAAO,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACjC,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,mBACA,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,SAAf,QACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,SAAf,QACA,kBAACQ,EAAA,EAAD,CAAaC,MAAM,WAAWL,GAAG,sBAC/B,kBAACI,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,UACA,kBAACQ,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,kBACA,kBAACQ,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,aACA,kBAACQ,EAAA,EAAYG,QAAb,MACA,kBAACH,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,oBAGJ,kBAACY,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACC,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,SAASV,UAAU,YACxD,kBAACW,EAAA,EAAD,CAAQC,QAAQ,mBAAhB,iB,GAnBiBC,IAAMC,W,QCqBhBC,E,iLAnBX,OACE,yBAAKC,MAAM,YACJ,kBAACC,EAAA,EAAD,KACH,kBAACA,EAAA,EAAKC,IAAN,CAAUN,QAAQ,MAAMO,IAAI,gGAC5B,kBAACF,EAAA,EAAKG,KAAN,KACE,kBAACH,EAAA,EAAKI,MAAN,KAAaC,KAAKC,MAAMpB,OACxB,kBAACc,EAAA,EAAKO,KAAN,uGAIA,kBAACb,EAAA,EAAD,CAAQC,QAAQ,WAAhB,uB,GAZSC,IAAMC,WCErBW,EADU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACTC,IAAI,SAAAC,GAAM,OAAI,kBAAC,EAAD,CAAQxB,MAAOwB,MAYxCC,E,iLARX,OACE,yBAAK5B,UAAU,OACbyB,O,GAJeZ,IAAMC,W,QC0Bde,E,YA7Bb,WAAYN,GAAQ,IAAD,8BACjB,4CAAMA,KAEDO,MAAQ,CACXC,QAAS,GAGX,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAPF,E,2EAWjBX,KAAKY,SAAS,SAAAC,GAAS,MAAK,CACxBJ,QAASI,EAAUJ,QAAU,O,+BAMjC,OACE,kBAAC,IAAMK,SAAP,KACE,2CACA,2BAAId,KAAKC,MAAMc,SACf,kBAAC1B,EAAA,EAAD,CAAQC,QAAQ,YAAY0B,QAAShB,KAAKU,aAA1C,aACA,4CAAkBV,KAAKQ,MAAMC,c,GAxBblB,IAAMC,WCgBfyB,MAbf,WACE,OACE,yBAAKvC,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,aACf,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAcwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.98cb4ada.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Navbar,Nav,NavDropdown,Form,FormControl,Button } from 'react-bootstrap';\r\n\r\nclass MainNavber extends React.Component {\r\n  render() {\r\n    return <Navbar bg=\"light\" expand=\"lg\">\r\n    <Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand>\r\n    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n      <Nav className=\"mr-auto\">\r\n        <Nav.Link href=\"#home\">Home</Nav.Link>\r\n        <Nav.Link href=\"#link\">Link</Nav.Link>\r\n        <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\r\n          <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n          <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\r\n          <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n          <NavDropdown.Divider />\r\n          <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n        </NavDropdown>\r\n      </Nav>\r\n      <Form inline>\r\n        <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n        <Button variant=\"outline-success\">Search</Button>\r\n      </Form>\r\n    </Navbar.Collapse>\r\n  </Navbar>\r\n  }\r\n}\r\n\r\nexport default MainNavber;\r\n","import React from \"react\";\r\nimport { Button, Card } from \"react-bootstrap\";\r\n\r\nclass MyCard extends React.Component {\r\n  render() {\r\n    return (\r\n      <div class=\"col-sm-4\">\r\n             <Card>\r\n          <Card.Img variant=\"top\" src=\"http://www.politicalmetaphors.com/wp-content/uploads/2015/04/blog-shapes-square-windows.jpg\" />\r\n          <Card.Body>\r\n            <Card.Title>{this.props.title}</Card.Title>\r\n            <Card.Text>\r\n              Some quick example text to build on the card title and make up the\r\n              bulk of the card's content.\r\n            </Card.Text>\r\n            <Button variant=\"primary\">Go somewhere</Button>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n   \r\n    );\r\n  }\r\n}\r\n\r\nexport default MyCard;\r\n","import React from \"react\";\r\n// import { Button, Card } from \"react-bootstrap\";\r\nimport MyCard from \"./card\";\r\n\r\nconst numbers = [1, 2, 3, 4, 5, 6, 7];\r\nconst listItems = numbers.map(number => <MyCard title={number} />);\r\n\r\nclass MenuCard extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"row\">\r\n       {listItems}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MenuCard;\r\n","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nclass AddNumber extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      counter: 0\r\n    };\r\n\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick() {\r\n    this.setState(prevState => ({\r\n        counter: prevState.counter + 1\r\n      }))\r\n      \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <h1>Ahoy! React</h1>\r\n        <p>{this.props.message}</p>\r\n        <Button variant=\"secondary\" onClick={this.handleClick}>Click me!</Button>\r\n        <p>Total click : {this.state.counter}</p>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddNumber;","import React from \"react\";\nimport \"./App.css\";\nimport MainNavber from \"./Component/navbar\";\nimport MenuCard from \"./Component/menuCard\";\nimport AddNumber from \"./Component/addNumber\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainNavber />\n      <div className=\"container\">\n      <AddNumber />\n      <MenuCard/>\n      </div>\n    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}